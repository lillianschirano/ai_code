import sys; args = sys.argv[1:]

CASH = {}
CACHE2 = {}
hole_limit = 7
qm_hl = 7

h_paths = [[i+j for i in range(8)] for j in range(0, 64, 8)]
v_paths = [[j+(i*8) for i in range(8)] for j in range(8)]
d_paths = [[j+(i*9) for i in range(8) if j+(i*9) < (i+1)*8] for j in range(8)]
d_paths = [lst for lst in d_paths if len(lst) >= 3]
d2_paths = [[j+(i*7) for i in range(8) if j+(i*7) <= j*8] for j in range(8)]
d2_paths = [lst for lst in d2_paths if len(lst) >= 3]
d3_paths = [[j+(i*7) for i in range(7) if j+(i*7) < (j%8+1)*8] for j in range(15, 64, 8)]
d3_paths = [lst for lst in d3_paths if len(lst) >= 3]
d4_paths = [[j+(i*9) for i in range(7) if j+(i*9) < 63] for j in range(8, 57, 8)]
d4_paths = [lst for lst in d4_paths if len(lst) >= 3]

all_paths = []
for path in h_paths: all_paths.append(path)
for path in v_paths: all_paths.append(path)
for path in d_paths: all_paths.append(path)
for path in d2_paths: all_paths.append(path)
for path in d3_paths: all_paths.append(path)
for path in d4_paths: all_paths.append(path)
pos_dct = {p:[path for path in all_paths if p in path] for p in range(64)}

def main():
    global hole_limit
    global CASH
    global CACHE2
    brd = '.'*27 + "ox......xo" + '.'*27 
    tk, not_tk = '', ''
    move = []
    if args:
        for a in args:
            a = a.lower()
            if len(a) == 64 and "." in a: brd = a
            elif a == 'x': tk, not_tk = a, 'o'
            elif  a == 'o': tk, not_tk = a, 'x'
            elif a[0:2] == "hl": hole_limit = int(a[2:])
            else:
                let = 'abcdefgh'
                if len(a) == 2 and a[0] in let: move.append(int(let.index(a[0])) + (int(a[1])-1)*8)
                elif a==0: move.append(0)
                elif len(a) <= 2: move.append(int(a))
                else:
                    for i in range(0, len(a), 2):
                        if a[i] == "_": move.append(int(a[i+1]))
                        else: move.append(int(a[i:i+2]))
    if hole_limit == -1: hole_limit = qm_hl
    if not tk:
        if brd.count('.')%2 == 1: tk, not_tk = 'o', 'x'
        else: tk, not_tk = 'x', 'o'
        moves = findMoves(brd, tk)
        if not moves or (move and move[0] not in moves):
            t = tk
            tk, not_tk = not_tk, t
            moves = findMoves(brd, tk)
    else:
        moves = findMoves(brd, tk)
    print_snapshot(brd, moves, tk, 65)
    for m in move: 
        if m >= 0: 
            brd = makeMove(brd, tk, m)
            print(tk + " plays to " + str(m))
            t = tk
            tk, not_tk = not_tk, t
            moves = findMoves(brd, tk)
            if not moves: 
                t = tk
                tk, not_tk = not_tk, t
                moves = findMoves(brd, tk)
            print_snapshot(brd, moves, tk, m)
    if brd.count('.') < hole_limit:
        if brd.count('.') == hole_limit-1: CASH, CACHE2 = {}, {}
        print("preferred move: ", end="")
        if brd.count('.') >= 11: nm = alphabeta(brd, tk, 1, -65, 65)
        else: nm = negamax(brd, tk, 1)
        print()
        print("min score: " + str(nm[0]) + " path: " + str(nm[1:]))
    
def quickMove(brd, tk):
    global qm_hl
    if brd == '': qm_hl = tk
    elif brd.count(".") < qm_hl: 
        return negamax(brd, tk, 1)[-1]
    else: 
        return preferred_move(brd, tk)
        
def preferred_move(brd, tk):
    best_choices = {0:"5", 1:"1", 2:"3", 3:"3", 4:"3", 5:"3", 6:"1", 7:"5", 8:"1", 9:"1", 10:"3", 11:"3", 12:"3", 13:"3", 14:"1", 15:"1", 16:"3", 17:"3", 18:"3", 19:"3", 20:"3", 21:"3", 22:"3", 23:"3", 24:"3", 25:"3", 26:"3", 27:"3", 28:"3", 29:"3", 30:"3", 31:"3", 32:"3", 33:"3", 34:"3", 35:"3", 36:"3", 37:"3", 38:"3", 39:"3", 40:"3", 41:"3", 42:"3", 43:"3", 44:"3", 45:"3", 46:"3", 47:"3", 48:"1", 49:"1", 50:"3", 51:"3", 52:"3", 53:"3", 54:"1", 55:"1", 56:"5", 57:"1", 58:"3", 59:"3", 60:"3", 61:"3", 62:"1", 63:"5"}
    possible_moves = [*findMoves(brd, tk)]
    best_choices = update_best_choices(best_choices, brd, tk, possible_moves)
    best = -1
    if len(possible_moves) == 1: return possible_moves[0]
    elif possible_moves: best = possible_moves[0]
    for m in possible_moves:
        if best_choices[m] > best_choices[best]: best = m
    return best

def findCorners(mv):
    moves = [m for m in mv if mv in {0, 7, 56, 63}]
    #for m in mv:
        #if m in {2, 3, 4, 5, 16, 24, 32, 40, 15, 23, 31, 39, 58, 59, 60, 61}: moves.append(m)
    for m in mv: 
        if not m in {0, 7, 56, 63, 1, 6, 9, 8, 14, 15, 48, 49, 57, 55, 54, 62}: moves.append(m)
    for m in mv: 
        if m in {1, 6, 9, 8, 14, 15, 48, 49, 57, 55, 54, 62}: moves.append(m)
    return moves
    

def alphabeta(brd, tk, level, lowerBnd, upperBnd):
    #returns best score + move sequence in a list
    key = (brd, tk, lowerBnd, upperBnd)
    if key in CASH: return CASH[key]
    eTkn = 'x'
    if tk == 'x': eTkn = 'o'
    if not ((mv:=findMoves(brd, tk)) or findMoves(brd, eTkn)): return [brd.count(tk)-brd.count(eTkn)]
    best_so_far = [lowerBnd+1]
    if not mv: 
        switch = alphabeta(brd, eTkn, level+1, -upperBnd, -lowerBnd)
        if -switch[0] > best_so_far[0]: best_so_far = [-switch[0]] + switch[1:] + [-1]
    mv = findCorners(mv)
    for m in mv: 
        new_brd = makeMove(brd, tk, m)
        ab = alphabeta(new_brd, eTkn, level+1, -upperBnd, -lowerBnd)
        score = -ab[0]
        if score > upperBnd: 
            CASH[key] = [score]
            return [score]
        elif score > best_so_far[0]:
            if level == 1: print(str(m) + " ", end="")
            best_so_far = [score] + ab[1:] + [m]
            lowerBnd=score+1
    CASH[key] = best_so_far
    return best_so_far

def negamax(brd, tk, level):
    key = (brd, tk)
    if key in CASH: return CASH[key]
    eTkn = 'x'
    if tk == 'x': eTkn = 'o'
    if not ((mv:=findMoves(brd, tk)) or findMoves(brd, eTkn)): return [brd.count(tk)-brd.count(eTkn)]
    if not mv: 
        switch = negamax(brd, eTkn, level+1)
        return [-switch[0]] + switch[1:] + [-1]
    best_so_far = [-65]
    for m in mv: 
        new_brd = makeMove(brd, tk, m)
        nm = negamax(new_brd, eTkn, level+1)
        if -nm[0] > best_so_far[0]:
            if level == 1: print(str(m) + " ", end="")
            best_so_far = [-nm[0]] + nm[1:] + [m]
    CASH[key] = best_so_far
    return best_so_far

def update_best_choices(best_choices, brd, tk, pos):
    not_tk = 'x'
    if tk == 'x': not_tk = 'o'
    if brd[0] == tk: 
        best_choices[1], best_choices[8], best_choices[9] = "4", "4", "3"
    if brd[7] == tk: 
        best_choices[6], best_choices[15], best_choices[14] = "4", "4", "3"
    if brd[56] == tk: 
        best_choices[48], best_choices[57], best_choices[49] = "4", "4", "3"
    if brd[63] == tk: 
        best_choices[62], best_choices[55], best_choices[54] = "4", "4", "3"
    for i in range(2, 6):
            if brd[i-1] == "." and brd[i+1] == ".": best_choices[i] = "4"
            if not not_tk in brd[i+1:] or not not_tk in brd[:i]: best_choices[i] = "4"
    for i in range(2, 6):
            if brd[i-1+56] == "." and brd[i+1+56] == ".": best_choices[i] = "4"
            if not not_tk in brd[i+1+56:] or not not_tk in brd[56:i+56]: best_choices[i] = "4"
    sub = brd[0:57:8]
    for i in range(2, 6):
            if sub[i-1] == "." and sub[i+1] == ".": best_choices[i*8] = "4"
            if not not_tk in sub[i+1:] or not not_tk in sub[:i]: best_choices[i*8] = "4"
    sub = brd[7:64:8]
    for i in range(2, 6):
            if sub[i-1] == "." and sub[i+1] == ".": best_choices[(i*8)+7] = "4"
            if not not_tk in sub[i+1:] or not not_tk in sub[:i]: best_choices[(i*8)+7] = "4"
    for p in pos: 
        if p!= 63 and brd[p+1] == not_tk and p in [10, 11, 12, 13, 14, 17, 22, 25, 30, 33, 38, 4, 46, 50, 51, 52, 53, 54]: best_choices[p] = "2"
    return best_choices
    
def print_snapshot(brd, moves, tk, mv):
    copyBrd = [b for b in brd]
    to_print = "possible moves for " + tk + ": "
    pos = []
    for m in moves:
        copyBrd[m] = "*"
        pos.append(m)
    if mv != 65: copyBrd[mv] = copyBrd[mv].upper()
    copyBrd = "".join(copyBrd)
    print("\n".join([copyBrd[i-8:i] for i in range(8, 65, 8)]))
    print(brd + " " + str(brd.count('x')) + "/" + str(brd.count('o')))
    if moves: 
        pos = sorted(pos)
        for m in pos:
            to_print+= str(m) + ", "
        print(to_print[:-2])
    print("preferred move: " + str(preferred_move(brd, tk)))

def makeMove(brd, tk, move):
    brd = [*brd]
    brd[move] = tk
    for lst in pos_dct[move]:
        inds = [c for c in lst if brd[c] == tk]
        ls = [i for i in inds if i<move]
        rs = [i for i in inds if i>move]
        if ls:
            if not "." in [brd[c] for c in lst[lst.index(ls[-1]):lst.index(move)]]:
                for i in lst:
                    if i < move and i > ls[-1]:
                        brd[i] = tk
        if rs:
            if not "." in [brd[c] for c in lst[lst.index(move):lst.index(rs[0])]]:
                for i in lst: 
                    if i > move and i < rs[0]:
                        brd[i] = tk
    final = "".join(brd)
    return final    

def make_ds(brd):
    return {i for i in range(64) if brd[i] == "."}

def findMoves(brd, tk):
    key = (brd, tk)
    if key in CACHE2: return CACHE2[key]
    not_tk = 'o'
    if tk == 'o': not_tk = 'x'
    moves = set()
    op_pos = make_ds(brd)
    for pos in op_pos:
        for s in pos_dct[pos]:
            ind = s.index(pos)
            rs = [brd[i] for i in s[ind+1:]]
            if rs and rs[0] == not_tk and tk in rs:
                if not '.' in rs[:rs.index(tk)]: 
                    moves.add(pos)
                    break
            ls = [brd[i] for i in s[:ind]]
            if ls and ls[-1] == not_tk and tk in ls: 
                if not '.' in ls[len(ls)-ls[-1::-1].index(tk):]: 
                    moves.add(pos)
                    break
    CACHE2[key] = moves
    return moves
     
if __name__ == '__main__': main() 
    
# Lillian Schirano, pd4, 2024
